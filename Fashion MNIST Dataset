{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CNN Using Keras.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNBRRkbtF+pCRuNfX2v8PNq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Misudhari/Deep-Learning-Lab/blob/main/Fashion%20MNIST%20Dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MMvLRw-dbV0s",
        "outputId": "290f48dd-8753-4fec-9b82-602f61ed34cf"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "id": "-EI5p5qgaQHc"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import tensorflow as tf\n",
        "import keras\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout\n",
        "from keras.optimizers import adam_v2\n",
        "\n",
        "# from keras.callbacks import TensorBoard\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_train = pd.read_csv('/content/drive/MyDrive/Datasets/MNIST Dataset/Fashion MNIST/fashion-mnist_train.csv')\n",
        "df_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "YicCAuQGbJK-",
        "outputId": "74825bb8-5ad7-4e05-e787-89b968158b65"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   label  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
              "0      2       0       0       0       0       0       0       0       0   \n",
              "1      9       0       0       0       0       0       0       0       0   \n",
              "2      6       0       0       0       0       0       0       0       5   \n",
              "3      0       0       0       0       1       2       0       0       0   \n",
              "4      3       0       0       0       0       0       0       0       0   \n",
              "\n",
              "   pixel9  ...  pixel775  pixel776  pixel777  pixel778  pixel779  pixel780  \\\n",
              "0       0  ...         0         0         0         0         0         0   \n",
              "1       0  ...         0         0         0         0         0         0   \n",
              "2       0  ...         0         0         0        30        43         0   \n",
              "3       0  ...         3         0         0         0         0         1   \n",
              "4       0  ...         0         0         0         0         0         0   \n",
              "\n",
              "   pixel781  pixel782  pixel783  pixel784  \n",
              "0         0         0         0         0  \n",
              "1         0         0         0         0  \n",
              "2         0         0         0         0  \n",
              "3         0         0         0         0  \n",
              "4         0         0         0         0  \n",
              "\n",
              "[5 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0a8c8527-7794-401b-9912-16ab8673427a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>pixel1</th>\n",
              "      <th>pixel2</th>\n",
              "      <th>pixel3</th>\n",
              "      <th>pixel4</th>\n",
              "      <th>pixel5</th>\n",
              "      <th>pixel6</th>\n",
              "      <th>pixel7</th>\n",
              "      <th>pixel8</th>\n",
              "      <th>pixel9</th>\n",
              "      <th>...</th>\n",
              "      <th>pixel775</th>\n",
              "      <th>pixel776</th>\n",
              "      <th>pixel777</th>\n",
              "      <th>pixel778</th>\n",
              "      <th>pixel779</th>\n",
              "      <th>pixel780</th>\n",
              "      <th>pixel781</th>\n",
              "      <th>pixel782</th>\n",
              "      <th>pixel783</th>\n",
              "      <th>pixel784</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30</td>\n",
              "      <td>43</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 785 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a8c8527-7794-401b-9912-16ab8673427a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0a8c8527-7794-401b-9912-16ab8673427a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0a8c8527-7794-401b-9912-16ab8673427a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test = pd.read_csv('/content/drive/MyDrive/Datasets/MNIST Dataset/Fashion MNIST/fashion-mnist_test.csv')\n",
        "df_test.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "FZVnCZu7dTMb",
        "outputId": "e0bc4691-8a71-4092-ff3f-febe3d2cf699"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   label  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
              "0      0       0       0       0       0       0       0       0       9   \n",
              "1      1       0       0       0       0       0       0       0       0   \n",
              "2      2       0       0       0       0       0       0      14      53   \n",
              "3      2       0       0       0       0       0       0       0       0   \n",
              "4      3       0       0       0       0       0       0       0       0   \n",
              "\n",
              "   pixel9  ...  pixel775  pixel776  pixel777  pixel778  pixel779  pixel780  \\\n",
              "0       8  ...       103        87        56         0         0         0   \n",
              "1       0  ...        34         0         0         0         0         0   \n",
              "2      99  ...         0         0         0         0        63        53   \n",
              "3       0  ...       137       126       140         0       133       224   \n",
              "4       0  ...         0         0         0         0         0         0   \n",
              "\n",
              "   pixel781  pixel782  pixel783  pixel784  \n",
              "0         0         0         0         0  \n",
              "1         0         0         0         0  \n",
              "2        31         0         0         0  \n",
              "3       222        56         0         0  \n",
              "4         0         0         0         0  \n",
              "\n",
              "[5 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de0cfa1e-e76f-419f-a9bb-d99b362fe704\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>pixel1</th>\n",
              "      <th>pixel2</th>\n",
              "      <th>pixel3</th>\n",
              "      <th>pixel4</th>\n",
              "      <th>pixel5</th>\n",
              "      <th>pixel6</th>\n",
              "      <th>pixel7</th>\n",
              "      <th>pixel8</th>\n",
              "      <th>pixel9</th>\n",
              "      <th>...</th>\n",
              "      <th>pixel775</th>\n",
              "      <th>pixel776</th>\n",
              "      <th>pixel777</th>\n",
              "      <th>pixel778</th>\n",
              "      <th>pixel779</th>\n",
              "      <th>pixel780</th>\n",
              "      <th>pixel781</th>\n",
              "      <th>pixel782</th>\n",
              "      <th>pixel783</th>\n",
              "      <th>pixel784</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>103</td>\n",
              "      <td>87</td>\n",
              "      <td>56</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>53</td>\n",
              "      <td>99</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "      <td>53</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>137</td>\n",
              "      <td>126</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "      <td>133</td>\n",
              "      <td>224</td>\n",
              "      <td>222</td>\n",
              "      <td>56</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 785 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de0cfa1e-e76f-419f-a9bb-d99b362fe704')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-de0cfa1e-e76f-419f-a9bb-d99b362fe704 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-de0cfa1e-e76f-419f-a9bb-d99b362fe704');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data = np.array(df_train,dtype = 'float32')\n",
        "test_data = np.array(df_test, dtype = 'float32')\n",
        "\n",
        "x_train = train_data[:,1:] / 255\n",
        "y_train = train_data[:,0]\n",
        "\n",
        "x_test = test_data[:,1:] / 255\n",
        "y_test = test_data[:,0]"
      ],
      "metadata": {
        "id": "8xtARPyufgIi"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# x_train , x_validate, y_train, y_validate = train_test_split(\n",
        "#     x_train, y_train, test_size=0.2, random_state = 12345\n",
        "# )"
      ],
      "metadata": {
        "id": "WtSx-VtXy6dq"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "i = random.randint(1,60000)\n",
        "image = x_train[i, :].reshape((28,28))\n",
        "plt.imshow(image)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "AA_E5YbPdjKA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "f168b747-d336-47d7-fc4c-2f4da999cea6"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Create CNN\n",
        "\n",
        "\n",
        "* Define Model\n",
        "* Compile the model\n",
        "* Fit the model\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Qi00S0iH4XuH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "im_rows = 28\n",
        "im_cols = 28\n",
        "batch_size = 512\n",
        "im_shape = (im_rows, im_cols, 1)\n",
        "\n",
        "x_train = x_train.reshape(x_train.shape[0], *im_shape)\n",
        "x_test = x_test.reshape(x_test.shape[0], *im_shape)\n",
        "# x_validate = x_test.reshape(x_test.shape[0], *im_shape)\n",
        "\n",
        "print(\"x_train Shape: {}\".format(x_train.shape))\n",
        "print(\"x_test Shape: {}\".format(x_test.shape))\n",
        "# print(\"x_validate Shape: {}\".format(x_validate.shape))"
      ],
      "metadata": {
        "id": "9OvkAmkHePfA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "968cd2e7-1d92-4ea9-b51b-16fc94852f85"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train Shape: (60000, 28, 28, 1)\n",
            "x_test Shape: (10000, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_model = Sequential([\n",
        "    Conv2D(filters = 32, kernel_size=3, activation = 'relu', input_shape = im_shape),\n",
        "    MaxPooling2D(pool_size=2),\n",
        "    Dropout(0.2),\n",
        "\n",
        "    Flatten(),\n",
        "    Dense(32, activation = 'relu'),\n",
        "    Dense(10, activation = 'softmax')\n",
        "])"
      ],
      "metadata": {
        "id": "WpYc4gapyfAf"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_model.compile(\n",
        "    loss = 'sparse_categorical_crossentropy',\n",
        "    optimizer = adam_v2.Adam(learning_rate=0.001),\n",
        "    metrics=['accuracy']\n",
        ")"
      ],
      "metadata": {
        "id": "SHT87eCs7-Z2"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_model.fit(\n",
        "    x_train, y_train, batch_size = batch_size,\n",
        "    epochs = 10, verbose=1\n",
        "    # validation_data = (x_validate, y_validate)\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vHrMF0XB8ZvP",
        "outputId": "0da7dbae-d704-4ba4-b70e-28d59ac6411f"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "118/118 [==============================] - 26s 213ms/step - loss: 0.6989 - accuracy: 0.7712\n",
            "Epoch 2/10\n",
            "118/118 [==============================] - 23s 195ms/step - loss: 0.4151 - accuracy: 0.8547\n",
            "Epoch 3/10\n",
            "118/118 [==============================] - 23s 194ms/step - loss: 0.3703 - accuracy: 0.8717\n",
            "Epoch 4/10\n",
            "118/118 [==============================] - 23s 195ms/step - loss: 0.3411 - accuracy: 0.8810\n",
            "Epoch 5/10\n",
            "118/118 [==============================] - 23s 195ms/step - loss: 0.3247 - accuracy: 0.8864\n",
            "Epoch 6/10\n",
            "118/118 [==============================] - 23s 194ms/step - loss: 0.3099 - accuracy: 0.8908\n",
            "Epoch 7/10\n",
            "118/118 [==============================] - 23s 194ms/step - loss: 0.2965 - accuracy: 0.8972\n",
            "Epoch 8/10\n",
            "118/118 [==============================] - 23s 195ms/step - loss: 0.2855 - accuracy: 0.9006\n",
            "Epoch 9/10\n",
            "118/118 [==============================] - 23s 195ms/step - loss: 0.2804 - accuracy: 0.9002\n",
            "Epoch 10/10\n",
            "118/118 [==============================] - 24s 202ms/step - loss: 0.2703 - accuracy: 0.9050\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7ff8e07664d0>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score = cnn_model.evaluate(x_train, y_train, verbose=0)\n",
        "\n",
        "print(\"test loss: {:.4f}\".format(score[0]))\n",
        "print(\" test acc: {:.4f}\".format(score[1]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q9t8oXTZ8-iy",
        "outputId": "7595e33a-bc6c-4b86-aeee-d2b7a9eb8d4a"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test loss: 0.2545\n",
            " test acc: 0.9117\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#References\n",
        "* Deep Learning with Keras + TensorFlow - (Pt.1) Build the CNN - https://youtu.be/N3oMKS1AfVI\n",
        "* Deep Learning with Keras + TensorFlow - (Pt.2) Build the CNN - https://youtu.be/lOZGYzTn9Z8"
      ],
      "metadata": {
        "id": "Vuvt1KGuHfJP"
      }
    }
  ]
}